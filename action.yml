name: "Publish to store Android"
description: "Unique step to Publish to store Android"
inputs:
  # App
  appName:
    description: "Nombre de la aplicacion (dentro del proyecto)"
    required: true
  appVersion:
    description: "tag para subir imagen"
    required: true
  environment:
    description: "nombre de environment"
    required: false
    default: ""
  artifact_name:
    description: "nombre del artifact"
    required: false
    default: ""
  isProd:
    description: "flag para saber si es un despliegue productivo"
    required: false
    default: "false"
  filename:
    description: "nombre del archivo"
    required: false
    default: "app-release-signed.apk"
  gitOpsUrl:
    description: "Url de github-integration"
    required: false
    default: "https://github-integration-gitops-prod.apps.andreani.com.ar"
outputs:
  aplicacion_id:
    description: "aplicacion id"
    value: ${{ steps.publish.outputs.aplicacion_id }}

runs:
  using: "composite"
  steps:
    - run: echo publish to ${{ inputs.environment }}
      shell: bash

    - name: Set artifact name
      id: setArtifactName
      run: |
        if [ -z "${{ inputs.artifact_name }}" ]; then
          echo "artifact_name is empty, setting it to appName and environment"
          echo "name=${{ inputs.appName }}-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "artifact_name is provided: ${{ inputs.artifact_name }}"
          echo "name=${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
      
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.setArtifactName.outputs.name }}
        path: app

    - name: Publish to store
      id: publish
      run: |
        echo "Publishing to store"
        echo "appName: ${{ inputs.appName }}"
        echo "appVersion: ${{ inputs.appVersion }}"
        echo "environment: ${{ inputs.environment }}"
        echo "artifact_name: ${{ inputs.artifact_name }}"
        echo "isProd: ${{ inputs.isProd }}"
        echo "gitOpsUrl: ${{ inputs.gitOpsUrl }}"

        # Set Organization and RepositoryName from GitHub context
        ORGANIZATION="${{ github.repository_owner }}"
        REPOSITORY="${{ github.repository }}"

        response=$(curl -X POST "${{ inputs.gitOpsUrl }}/api/v1/app-distribution" \
              -H "accept: application/json" \
              -H "Content-Type: multipart/form-data" \
              -F "Organization=$ORGANIZATION" \
              -F "RepositoryName=$REPOSITORY" \
              -F "AppName=${{ inputs.appName }}" \
              -F "Version=${{ inputs.appVersion }}" \
              -F "EnvironmentName=${{ inputs.environment }}" \
              -F "IsEnvironmentProduction=${{ inputs.isProd }}" \
              -F "DeploymentName=${{ inputs.environment }}" \
              -F "File=@app/${{ inputs.filename }}" \
              --connect-timeout 30 \
              --max-time 60 \
              -w "%{http_code}" \
              -o response_body.txt)

        echo "API Response: $(<response_body.txt)"
        
        # Extraer el status_code de la respuesta usando grep y sed
        #status_code=$(grep -o '"statusCode":[^,]*' response_body.txt | sed 's/[^0-9]*//g')
        
        #if [ "$status_code" -eq 200 ]; then
        #  echo "statusCode: 200" >> $GITHUB_OUTPUT
        #else
        #  echo "Error: $response"
        #fi
      shell: bash

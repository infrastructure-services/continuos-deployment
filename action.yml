name: 'Build and Deploy'
description: 'Unique step to Build and Deploy'
inputs:
  # ACR
  ACR_USERNAME:
    description: "user de acr"
    required: true
  ACR_PASSWORD:
    description: "passwrd de acr"
    required: true
  ACR_NAME:
    description: "nommbre del acr"
    required: true
  ACR_FULL_NAME:
    description: "nombre del acr con azurecr.io"
    required: true

  # App
  appName:
    description: "Nombre de la aplicacion (dentro del proyecto)"
    required: true
  teamProject:
    description: "Nombre del proyecto/equipo"
    required: true
  appVersion:
    description: "tag para subir imagen"
    required: true

  # Values
  github_token:
    description: "Token para descargar el codigo de templates HELM"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ inputs.ACR_NAME }}.azurecr.io 
        username: ${{ inputs.ACR_USERNAME }}
        password: ${{ inputs.ACR_PASSWORD }}

    - name: Get the branch name
      id: branch
      run: echo "BranchName=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the branch name
      id: semanticBranches
      run: | 
        echo "The branch name is ${{ steps.branch.outputs.BranchName }}"
        if [[ ${{ steps.branch.outputs.BranchName }} == "main" ]]; then
          echo "configureBranch=[\"main\"]" >> $GITHUB_OUTPUT
        else
          echo "configureBranch=[\"main\", {\"name\": \"${{ steps.branch.outputs.BranchName }}\", \"prerelease\": \"${{ steps.branch.outputs.BranchName }}\" }]" >> $GITHUB_OUTPUT
        fi
      shell: bash
        
    - name: "Generate Release"
      id: version
      uses: architecture-it/actions@next-version
      with:
        github_token: ${{ inputs.github_token }}
        only_version: 'false'
        branches: ${{ steps.semanticBranches.outputs.configureBranch }}

    - name: "Pull-Tag-Push imagen"
      if: steps.version.outputs.new-version != ''
      id: pullImage
      run: |
        echo "Pull imagen"
        docker pull ${{ inputs.ACR_FULL_NAME }}/${{inputs.teamProject}}-${{inputs.appName}}:${{ inputs.appVersion}}
        docker tag ${{ inputs.ACR_FULL_NAME }}/${{inputs.teamProject}}-${{inputs.appName}}:${{ inputs.appVersion}} ${{ inputs.ACR_FULL_NAME }}/${{inputs.teamProject}}-${{inputs.appName}}:${{ steps.version.outputs.new-version }}
        docker push ${{ inputs.ACR_FULL_NAME }}/${{inputs.teamProject}}-${{inputs.appName}}:${{ steps.version.outputs.new-version }}
      shell: bash

    - name: "Annotation Version"
      if: steps.version.outputs.new-version != ''
      shell: bash
      run: |
        echo "Annotation Version"
        echo "::notice::Version Latest: ${{ steps.version.outputs.new-version }}"
        echo "::notice::Image name: ${{ inputs.ACR_FULL_NAME }}/${{inputs.teamProject}}-${{inputs.appName}}:${{ steps.version.outputs.new-version }}"
    
    - name: Checkout
      uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
   
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
      if: github.ref == 'refs/heads/hotfix'
      with:
        token: ${{ inputs.github_token }} # Usa el token secreto de GitHub
        commit-message: Hotfix applied
        title: Apply hotfix to main
        body: This is an automated PR to apply hotfix changes to the main branch.
        base: main # Rama base a la que se dirige el PR
        branch: "hotfix-apply-${{ github.run_number }}" # Nombre explícito de la rama del PR

    - run: echo "✅ Success"
      shell: bash